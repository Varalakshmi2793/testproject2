const express = require('express');
const mysql = require('mysql');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const port = 2050;

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'Password@123',
    database: 'testproject2'
});

connection.connect((err) => {
    if (err) {
        console.error('Error connecting to MySQL:', err);
        return;
    }
    console.log('Connected to MySQL');
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

app.get('/tables', (req, res) => {
    connection.query('SHOW TABLES', (error, results) => {
        if (error) {
            console.error('Error fetching tables:', error);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        const tables = results.map(result => ({ table_name: result[`Tables_in_${connection.config.database}`] }));
        res.json(tables);
    });
});

app.post('/tables', (req, res) => {
    const { tableName, columns } = req.body;

    const primaryKeyIndex = columns.toLowerCase().indexOf('primary key');

    let columnsWithAutoGenerated = columns;
    if (primaryKeyIndex === -1) {
        // Add id column with AUTO_INCREMENT PRIMARY KEY if no primary key is specified
        columnsWithAutoGenerated += ', id INT AUTO_INCREMENT PRIMARY KEY';
    }

    
    connection.query(`CREATE TABLE ${tableName} (${columnsWithAutoGenerated})`, (error) => {
        if (error) {
            console.error('Error creating table:', error);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }

        res.json({ message: 'Table created successfully' });
    });
});

app.get('/tables/:tableName/columns', (req, res) => {
    const { tableName } = req.params;
    const query = `SHOW COLUMNS FROM ${tableName}`;

    connection.query(query, (error, results) => {
        if (error) {
            console.error('Error fetching columns:', error);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }
        const columns = results.map(result => result.Field);
        res.json(columns);
    });
});

app.post('/tables/:tableName/records', (req, res) => {
    const { tableName } = req.params;
    const values = req.body;

    connection.query(`INSERT INTO ${tableName} SET ?`, values, (error, results) => {
        if (error) {
            console.error('Error inserting values:', error);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }

        const insertedRecordIds = results.insertId;
        
        res.json({ message: 'Values inserted successfully', insertedRecordIds });
    });
});
app.delete('/tables/:tableName/records/:recordId', (req, res) => {
    const { tableName, recordId } = req.params;

    connection.query(`DELETE FROM ${tableName} WHERE id = ?`, [recordId], (error) => {
        if (error) {
            console.error('Error deleting record:', error);
            res.status(500).json({ error: 'Internal server error' });
            return;
        }

        console.log('Record deleted successfully');
        res.json({ message: 'Record deleted successfully' });
    });
});



app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
